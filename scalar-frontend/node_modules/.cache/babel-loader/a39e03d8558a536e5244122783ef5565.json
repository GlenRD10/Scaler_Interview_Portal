{"ast":null,"code":"var _jsxFileName = \"/home/battle8ee/Downloads/scalar-frontend/src/components/Form/CreateInterview.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport Multiselect from 'multiselect-react-dropdown';\nimport moment from 'moment';\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport classes from './CreateInterview.module.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateInterview = () => {\n  _s();\n\n  const location = useLocation();\n  let prefilledData = {\n    data: location.state.data\n  };\n  console.log(prefilledData);\n  const navigate = useNavigate();\n  const [date, setDate] = useState(new Date(moment().toDate()));\n  const [startTime, setStartTime] = useState(new Date(moment().toDate()));\n  const [endTime, setEndTime] = useState(new Date(moment().toDate()));\n  const [selectedInterviewers, setSelectedInterviewers] = useState();\n  const [selectedParticipants, setSelectedParticipants] = useState();\n  const [interviewerList, setInterviewerList] = useState([]);\n  const [participantList, setParticpantList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/v1/interviewers\").then(response => response.json()).then(data => {\n      setInterviewerList(data.interviewer);\n      setLoading(false);\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/v1/participants\").then(response => response.json()).then(data => {\n      setParticpantList(data.participant);\n      setLoading(false);\n    });\n  }, []);\n\n  const handleDateChange = newValue => {\n    setDate(newValue);\n  };\n\n  const handleStartTimeChange = newValue => {\n    setStartTime(newValue);\n  };\n\n  const handleEndTimeChange = newValue => {\n    setEndTime(newValue);\n  };\n\n  const interviewerSelect = selectedItem => {\n    delete selectedItem.interviews;\n    setSelectedInterviewers(selectedItem);\n    console.log(selectedInterviewers);\n  };\n\n  const interviewerRemove = selectedItem => {\n    delete selectedItem.interviews;\n    setSelectedInterviewers(selectedItem);\n    console.log(selectedInterviewers);\n  };\n\n  const participantSelect = selectedItem => {\n    delete selectedItem.interviews;\n    setSelectedParticipants(selectedItem);\n    console.log(selectedParticipants);\n  };\n\n  const participantRemove = selectedItem => {\n    setSelectedParticipants(selectedParticipants.filter(item => item !== selectedItem));\n    console.log(selectedParticipants);\n  };\n\n  const onFormSubmit = async e => {\n    e.preventDefault();\n    let data = JSON.stringify({\n      date: date,\n      startTime: startTime,\n      endTime: endTime,\n      interviewers: selectedInterviewers,\n      participants: selectedParticipants\n    });\n    console.log(data);\n    const url = 'http://localhost:5000/api/v1/interview';\n\n    try {\n      const rawResponse = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: data,\n        crossDomain: true\n      });\n      const content = await rawResponse.json();\n      console.log(content);\n    } catch (e) {\n      console.log(e);\n    }\n\n    navigate('/', {\n      state: {}\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.heading,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Schedule an Interview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), !loading && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(LocalizationProvider, {\n        dateAdapter: AdapterDateFns,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(DesktopDatePicker, {\n            label: \"Select Date\",\n            inputFormat: \"MM/dd/yyyy\",\n            minDate: moment().toDate(),\n            value: date,\n            onChange: handleDateChange,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TimePicker, {\n            label: \"Start Time\",\n            value: startTime,\n            minDate: moment().toDate(),\n            onChange: handleStartTimeChange,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TimePicker, {\n            label: \"End Time\",\n            value: endTime,\n            minDate: moment().toDate(),\n            onChange: handleEndTimeChange,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.dropdown,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Choose Interviewers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n          options: interviewerList,\n          displayValue: \"name\",\n          onSelect: interviewerSelect,\n          onRemove: interviewerRemove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Choose Participants\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n          options: participantList,\n          displayValue: \"name\",\n          onSelect: participantSelect,\n          onRemove: participantRemove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button,\n        type: \"submit\",\n        children: \"Create Interview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateInterview, \"JaX2Qe47gREfOkVFRu6AQO+Fgqo=\", false, function () {\n  return [useLocation, useNavigate];\n});\n\n_c = CreateInterview;\nexport default CreateInterview;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateInterview\");","map":{"version":3,"sources":["/home/battle8ee/Downloads/scalar-frontend/src/components/Form/CreateInterview.js"],"names":["React","DesktopDatePicker","Stack","TextField","AdapterDateFns","LocalizationProvider","TimePicker","Multiselect","moment","useState","useEffect","useNavigate","useLocation","classes","CreateInterview","location","prefilledData","data","state","console","log","navigate","date","setDate","Date","toDate","startTime","setStartTime","endTime","setEndTime","selectedInterviewers","setSelectedInterviewers","selectedParticipants","setSelectedParticipants","interviewerList","setInterviewerList","participantList","setParticpantList","loading","setLoading","fetch","then","response","json","interviewer","participant","handleDateChange","newValue","handleStartTimeChange","handleEndTimeChange","interviewerSelect","selectedItem","interviews","interviewerRemove","participantSelect","participantRemove","filter","item","onFormSubmit","e","preventDefault","JSON","stringify","interviewers","participants","url","rawResponse","method","headers","body","crossDomain","content","container","heading","params","dropdown","button"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\n\nimport Multiselect from 'multiselect-react-dropdown';\nimport moment from 'moment'\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport classes from './CreateInterview.module.css';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nconst CreateInterview = () => {\n    const location = useLocation();\n    let prefilledData = { data: location.state.data }\n    console.log(prefilledData);\n\n    const navigate = useNavigate();\n\n    const [date, setDate] = useState(new Date(moment().toDate()));\n    const [startTime, setStartTime] = useState(new Date(moment().toDate()));\n    const [endTime, setEndTime] = useState(new Date(moment().toDate()));\n    const [selectedInterviewers, setSelectedInterviewers] = useState();\n    const [selectedParticipants, setSelectedParticipants] = useState();\n\n    const [interviewerList, setInterviewerList] = useState([])\n    const [participantList, setParticpantList] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        fetch(\"http://localhost:5000/api/v1/interviewers\")\n        .then(response => response.json())\n        .then(data => {\n            setInterviewerList(data.interviewer)\n            setLoading(false)\n        })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        fetch(\"http://localhost:5000/api/v1/participants\")\n        .then(response => response.json())\n        .then(data => {\n            setParticpantList(data.participant)\n            setLoading(false)\n        })\n    }, [])\n\n    const handleDateChange = (newValue) => {\n        setDate(newValue);\n    };\n\n    const handleStartTimeChange = (newValue) => {\n        setStartTime(newValue);\n    };\n\n    const handleEndTimeChange = (newValue) => {\n        setEndTime(newValue);\n    };\n\n    const interviewerSelect = (selectedItem) => {\n        delete selectedItem.interviews;\n        setSelectedInterviewers(selectedItem);\n        console.log(selectedInterviewers)\n    }\n    \n    const interviewerRemove = (selectedItem) => {\n        delete selectedItem.interviews;\n        setSelectedInterviewers(selectedItem)\n        console.log(selectedInterviewers)\n    }\n\n    const participantSelect = (selectedItem) => {\n        delete selectedItem.interviews;\n        setSelectedParticipants(selectedItem);\n        console.log(selectedParticipants)\n    }\n\n    const participantRemove = (selectedItem) => {\n        setSelectedParticipants(selectedParticipants.filter(item => item !== selectedItem))\n        console.log(selectedParticipants)\n    }\n\n    const onFormSubmit = async (e) => {\n        e.preventDefault();\n        let data = JSON.stringify({\n            date: date,\n            startTime: startTime,\n            endTime: endTime,\n            interviewers: selectedInterviewers,\n            participants: selectedParticipants\n        });\n        console.log(data);\n        const url = 'http://localhost:5000/api/v1/interview';\n        try {\n            const rawResponse = await fetch(url, {\n                method: 'POST',\n                headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n                body: data,\n                crossDomain: true\n            });\n            const content = await rawResponse.json();\n\n            console.log(content);\n        } catch (e) {\n            console.log(e);\n        }\n        navigate('/', { state: {} });\n    };\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.heading}>\n                <h2>Schedule an Interview</h2>\n            </div>\n            {!loading && <form onSubmit={ onFormSubmit }>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <Stack spacing={3}>\n                        <DesktopDatePicker\n                            label=\"Select Date\"\n                            inputFormat=\"MM/dd/yyyy\"\n                            minDate={moment().toDate()}\n                            value={date}\n                            onChange={handleDateChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                        <TimePicker\n                            label=\"Start Time\"\n                            value={startTime}\n                            minDate={moment().toDate()}\n                            onChange={handleStartTimeChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                        <TimePicker\n                            label=\"End Time\"\n                            value={endTime}\n                            minDate={moment().toDate()}\n                            onChange={handleEndTimeChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                    </Stack>\n                </LocalizationProvider>\n                <div className={classes.dropdown}>\n                    <h4>Choose Interviewers</h4>\n                    <Multiselect\n                        options={interviewerList}\n                        displayValue=\"name\"\n                        onSelect={interviewerSelect}\n                        onRemove={interviewerRemove}\n                    />\n                    <br />\n                    <h4>Choose Participants</h4>\n                    <Multiselect\n                        options={participantList}\n                        displayValue=\"name\"\n                        onSelect={participantSelect}\n                        onRemove={participantRemove}\n                    />\n                </div>\n                <button className={classes.button} type=\"submit\">Create Interview</button>\n\n            </form>}\n        </div>\n    );\n};\n\nexport default CreateInterview;"]},"metadata":{},"sourceType":"module"}