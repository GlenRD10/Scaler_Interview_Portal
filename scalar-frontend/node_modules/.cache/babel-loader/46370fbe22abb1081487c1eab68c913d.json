{"ast":null,"code":"var _jsxFileName = \"/home/battle8ee/Downloads/scalar-frontend/src/components/Form/CreateInterview.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport Multiselect from 'multiselect-react-dropdown';\nimport moment from 'moment';\nimport { useState, useEffect } from \"react\";\nimport classes from './CreateInterview.module.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateInterview = () => {\n  _s();\n\n  const [date, setDate] = useState(new Date('2022-02-12T13:00:00.000Z'));\n  const [startTime, setStartTime] = useState(new Date(''));\n  const [endTime, setEndTime] = useState(new Date(''));\n  const [interviewerList, setInterviewerList] = useState([]);\n  const [participantList, setParticpantList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/v1/interviewers\").then(response => response.json()).then(data => {\n      setInterviewerList(data.interviewer);\n      setLoading(false);\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/v1/participants\").then(response => response.json()).then(data => {\n      setParticpantList(data.participant);\n      setLoading(false);\n    });\n  }, []);\n  let selectedValues = [];\n\n  const handleDateChange = newValue => {\n    setDate(newValue);\n  };\n\n  const handleStartTimeChange = newValue => {\n    setStartTime(newValue);\n  };\n\n  const handleEndTimeChange = newValue => {\n    setEndTime(newValue);\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.heading,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Schedule an Interview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), !loading && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(LocalizationProvider, {\n        dateAdapter: AdapterDateFns,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(DesktopDatePicker, {\n            label: \"Select Date\",\n            inputFormat: \"MM/dd/yyyy\",\n            minDate: moment().toDate(),\n            value: date,\n            onChange: handleDateChange,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TimePicker, {\n            label: \"Start Time\",\n            value: startTime,\n            minDate: moment().toDate(),\n            onChange: handleStartTimeChange,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TimePicker, {\n            label: \"End Time\",\n            value: endTime,\n            minDate: moment().toDate(),\n            onChange: handleEndTimeChange,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 54\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.dropdown,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Choose Interviewers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n          options: interviewerList,\n          selectedValues: selectedValues // Preselected value to persist in dropdown\n          ,\n          displayValue: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Choose Participants\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n          options: participantList,\n          selectedValues: selectedValues // Preselected value to persist in dropdown\n          ,\n          displayValue: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button,\n        type: \"submit\",\n        children: \"Create Interview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateInterview, \"q719XLBZnF9V/fIrDF97PCn9+tM=\");\n\n_c = CreateInterview;\nexport default CreateInterview;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateInterview\");","map":{"version":3,"sources":["/home/battle8ee/Downloads/scalar-frontend/src/components/Form/CreateInterview.js"],"names":["React","DesktopDatePicker","Stack","TextField","AdapterDateFns","LocalizationProvider","TimePicker","Multiselect","moment","useState","useEffect","classes","CreateInterview","date","setDate","Date","startTime","setStartTime","endTime","setEndTime","interviewerList","setInterviewerList","participantList","setParticpantList","loading","setLoading","fetch","then","response","json","data","interviewer","participant","selectedValues","handleDateChange","newValue","handleStartTimeChange","handleEndTimeChange","onFormSubmit","e","preventDefault","container","heading","toDate","params","dropdown","button"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\n\nimport Multiselect from 'multiselect-react-dropdown';\nimport moment from 'moment'\nimport { useState, useEffect } from \"react\";\n\nimport classes from './CreateInterview.module.css';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nconst CreateInterview = () => {\n    const [date, setDate] = useState(new Date('2022-02-12T13:00:00.000Z'));\n    const [startTime, setStartTime] = useState(new Date(''));\n    const [endTime, setEndTime] = useState(new Date(''));\n\n    const [interviewerList, setInterviewerList] = useState([])\n    const [participantList, setParticpantList] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        fetch(\"http://localhost:5000/api/v1/interviewers\")\n        .then(response => response.json())\n        .then(data => {\n            setInterviewerList(data.interviewer)\n            setLoading(false)\n        })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        fetch(\"http://localhost:5000/api/v1/participants\")\n        .then(response => response.json())\n        .then(data => {\n            setParticpantList(data.participant)\n            setLoading(false)\n        })\n    }, [])\n\n    let selectedValues = [];\n\n    const handleDateChange = (newValue) => {\n        setDate(newValue);\n    };\n\n    const handleStartTimeChange = (newValue) => {\n        setStartTime(newValue);\n    };\n\n    const handleEndTimeChange = (newValue) => {\n        setEndTime(newValue);\n    };\n\n    const onFormSubmit = (e) => {\n        e.preventDefault();\n    };\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.heading}>\n                <h2>Schedule an Interview</h2>\n            </div>\n            {!loading && <form onSubmit={ onFormSubmit }>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <Stack spacing={3}>\n                        <DesktopDatePicker\n                            label=\"Select Date\"\n                            inputFormat=\"MM/dd/yyyy\"\n                            minDate={moment().toDate()}\n                            value={date}\n                            onChange={handleDateChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                        <TimePicker\n                            label=\"Start Time\"\n                            value={startTime}\n                            minDate={moment().toDate()}\n                            onChange={handleStartTimeChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                        <TimePicker\n                            label=\"End Time\"\n                            value={endTime}\n                            minDate={moment().toDate()}\n                            onChange={handleEndTimeChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                    </Stack>\n                </LocalizationProvider>\n                <div className={classes.dropdown}>\n                    <h4>Choose Interviewers</h4>\n                    <Multiselect\n                        options={interviewerList}\n                        selectedValues={selectedValues} // Preselected value to persist in dropdown\n                        displayValue=\"name\"\n                    />\n                    <br />\n                    <h4>Choose Participants</h4>\n                    <Multiselect\n                        options={participantList}\n                        selectedValues={selectedValues} // Preselected value to persist in dropdown\n                        displayValue=\"name\"\n                    />\n                </div>\n                <button className={classes.button} type=\"submit\">Create Interview</button>\n            </form>}\n        </div>\n    );\n};\n\nexport default CreateInterview;"]},"metadata":{},"sourceType":"module"}